{"componentChunkName":"component---src-layout-post-layout-js","path":"/blog/7a8u9ezf8fy23","result":{"data":{"markdownRemark":{"frontmatter":{"slug":"7a8u9ezf8fy23","title":"VSCode + ESLint + Prettier の設定を完全に理解した【公式の英語ドキュメントに結論書いてた】","description":"VSCode + ESLint + Prettier の設定を完全に理解した【公式の英語ドキュメントに結論書いてた】","date":"2020-08-13T02:30:00.000Z"},"html":"<h1>概要</h1>\n<p><em>ESLint</em> と <em>Prettier</em> の設定に関して検索するとマジで情報が錯綜しすぎてどれが正解か分からないので、諦めて式ドキュメントを読みに行ったところ、普通に結論が書いてたので共有します。</p>\n<p>叶えたいこと。</p>\n<ul>\n<li><em>Prettier</em> には整形をやらせる。 (ソースの統一性を保つ。 <code class=\"language-text\">eslint --fix</code> は使わない)</li>\n<li><em>ESLint</em> にはコード品質チェック (バグチェック) をやらせる。</li>\n</ul>\n<p>他の記事と書いてあることが逆なこともあります。</p>\n<h1>結論</h1>\n<ul>\n<li><em>eslint-config-prettier</em> ( <em>ESLint</em> の整形設定周りを全部オフにする) を入れて <em>ESLint</em> に整形させない。</li>\n<li><em>eslint-plugin-prettier</em> ( <em>ESLint</em> から <em>Prettier</em> を動かす) は入れるな。</li>\n<li>\n<p>つまり <em>Prettier</em> は CLI でコマンドを叩くか、VSCode から実行する。</p>\n<ul>\n<li><code class=\"language-text\">editor.formatOnSave</code> を <code class=\"language-text\">true</code> にしてフォーマッタを <em>Prettier</em> に変更する。</li>\n<li>設定ファイル ( <code class=\"language-text\">.prettierrc.json</code> ) を VSCode に読み取らせる。</li>\n</ul>\n</li>\n</ul>\n<p>以上です。\nお疲れ様でした。</p>\n<h1>解説</h1>\n<p>というわけにもいかないので、公式ドキュメントを引用していきながら書きます。</p>\n<h2>前提</h2>\n<ul>\n<li>拡張機能 <em>ESLint</em> と <em>Prettier</em> を VSCode にインストールする。</li>\n<li><em>ESLint</em> と <em>Prettier</em> を開発環境にインストールする。</li>\n</ul>\n<h2><em>eslint-config-prettier</em> を入れて <em>ESLint</em> に整形させない</h2>\n<p><em>eslint-config-prettier</em> は <em>ESLint</em> の整形設定 ( <em>Prettier</em> と競合する設定 ) を全てオフにしてくれます。<br>\n<em>npm</em> や <em>yarn</em> でインストールした後、 <em>ESLint</em> の設定ファイルに追記します。</p>\n<p>インストールします。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">yarn</span> <span class=\"token function\">add</span> -D eslint-config-prettier</code></pre></div>\n<p><code class=\"language-text\">.eslintrc.js</code> の <code class=\"language-text\">extends</code> 末尾に以下を追記。<br>\n<code class=\"language-text\">prettier</code> 以外は必要に応じて抜き差ししてください。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">extends</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">'prettier'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 最低限必要</span>\n    <span class=\"token string\">'prettier/@typescript-eslint'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'prettier/react'</span>\n    <span class=\"token string\">'prettier/vue'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'prettier/babel'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'prettier/flowtype'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'prettier/standard'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'prettier/unicorn'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">extends</code> は別の設定ファイルを呼び出している記述です。<br>\nつまり、 <code class=\"language-text\">prettier*</code> に <em>ESLint</em> の設定を上書きしてもらわねければないので、他の <code class=\"language-text\">extends</code> を記述している場合はその後ろに追記するようにしてください。</p>\n<p><em>ESLint</em> 側の設定は終わりです。</p>\n<p><code class=\"language-text\">eslint:recommended</code> など、他のコード品質ルール等に関しては都度設定してください。</p>\n<p>また、<code class=\"language-text\">extends</code> が何の設定をしているか見たい場合は、 <code class=\"language-text\">node_modules/eslint-*</code> のディレクトリの中身を参照してください。多分大体 <code class=\"language-text\">index.js</code> に書いてます。</p>\n<h2><em>eslint-plugin-prettier</em> は入れるな</h2>\n<p>要約すると「 ** <em>Pretter</em> はエディタで大体対応してるからわざわざ <em>ESLint</em> から呼んでると、下線増えてウザいし重くなるからやめとけ** 」て感じです。</p>\n<p><em>Prettier</em> 公式ドキュメントより参考：</p>\n<blockquote>\n<p>When searching for both Prettier and your linter on the Internet you’ll probably find more related projects. These are generally not recommended, but can be useful in certain circumstances.</p>\n<p>First, we have plugins that let you run Prettier as if it was a linter rule:</p>\n<ul>\n<li>eslint-plugin-prettier</li>\n<li>tslint-plugin-prettier</li>\n<li>stylelint-prettier</li>\n</ul>\n<p>These plugins were especially useful when Prettier was new. By running Prettier inside your linters, you didn’t have to set up any new infrastructure and you could re-use your editor integrations for the linters. But these days you can run prettier --check . and most editors have Prettier support.</p>\n<p>The downsides of those plugins are:</p>\n<ul>\n<li>You end up with a lot of red squiggly lines in your editor, which gets annoying. Prettier is supposed to make you forget about formatting – and not be in your face about it!</li>\n<li>They are slower than running Prettier directly.</li>\n<li>They’re yet one layer of indirection where things may break.</li>\n</ul>\n</blockquote>\n<p>Integrating with Linters: <a href=\"https://prettier.io/docs/en/integrating-with-linters.html\">https://prettier.io/docs/en/integrating-with-linters.html</a></p>\n<p>じゃあ整形はどうするのかというと次項。</p>\n<h2><em>Prettier</em> は CLI でコマンドを叩くか、VSCode から実行する</h2>\n<h3>CLI から実行する場合</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">yarn</span> run prettier --write <span class=\"token builtin class-name\">.</span></code></pre></div>\n<h3>VSCode から実行する場合</h3>\n<p><code class=\"language-text\">setting.json</code> に以下を追記します。</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"editor.formatOnSave\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 保存時に自動整形</span>\n  <span class=\"token property\">\"editor.codeActionsOnSave\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 保存時のアクション設定</span>\n    <span class=\"token property\">\"source.fixAll.eslint\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">// ESLintが走るようにする。ESLintの設定をちゃんとしてれば整形はされない。</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"editor.defaultFormatter\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"esbenp.prettier-vscode\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// フォーマッタにPrettierを指定</span>\n  <span class=\"token property\">\"prettier.configPath\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\".prettierrc.json\"</span> <span class=\"token comment\">// Prettierの設定ファイルを読み込む</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>ショートカットキーを設定する方法もありますが、わざわざ無駄なショートカットキーを登録するのもアホらしいので、全ファイル横断したい場合は CLI から叩くほうがいいでしょう。<br>\n<em>npm scripts</em> に登録しとけば長いコマンド入力しなくても済みますね。</p>\n<p>一括でフォーマッターの設定をするのが嫌な場合は言語ごとにも指定できます。</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">  <span class=\"token property\">\"editor.formatOnSave\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"[javascript]\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"editor.formatOnSave\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p><code class=\"language-text\">prettier.configPath</code> はフォーマット時の VSCode 側の拡張機能設定を上書きするために設定します。<br>\nコマンドを実行しない場合は、VSCode 側で設定して <code class=\"language-text\">setting.json</code> を共有してもいいと思います。<br>\n<code class=\"language-text\">.prettierrc*</code> はプロジェクトに合わせて<a href=\"https://prettier.io/docs/en/options.html\">公式ドキュメントのオプション一覧</a>を見ながら書けばいいと思います。</p>\n<h4>設定の優先度について</h4>\n<ol>\n<li><em>Prettier</em> 設定ファイル ( <code class=\"language-text\">.prettierrc*</code> )</li>\n<li><code class=\"language-text\">.editorconfig</code> (これよくわからん)</li>\n<li>VSCode の設定 ( <code class=\"language-text\">setting.json</code> )</li>\n</ol>\n<p>なお <em>Prettier</em> 設定ファイルが存在する場合、VSCode の設定は使用 <strong>されない</strong> 。<br>\nまあ中途半端に設定混在されても困りますからね。</p>\n<p><em>Prettier</em> 公式 Github README より参考：</p>\n<blockquote>\n<h2>Visual Studio Code Settings</h2>\n<p>You can use VS Code settings to configure prettier. Settings will be read from (listed by priority):</p>\n<ol>\n<li>Prettier configuration file</li>\n<li>.editorconfig</li>\n<li>Visual Studio Code Settings (Ignored if any other configuration is present)</li>\n</ol>\n<p>NOTE: If any local configuration file is present (i.e. .prettierrc) the VS Code settings will <strong>NOT</strong> be used.</p>\n</blockquote>\n<p>Prettier Formatter for Visual Studio Code: <a href=\"https://github.com/prettier/prettier-vscode#user-content-visual-studio-code-settings\">https://github.com/prettier/prettier-vscode#user-content-visual-studio-code-settings</a></p>\n<h1>最後にもう一回やることをおさらい</h1>\n<ol>\n<li>拡張機能 <em>ESLint</em> と <em>Prettier</em> を VSCode にインストールする。</li>\n<li><em>ESLint</em> と <em>Prettier</em> を開発環境にインストールする。</li>\n<li><em>eslint-config-prettier</em> をインストールする。</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">yarn</span> <span class=\"token function\">add</span> -D eslint-config-prettier</code></pre></div>\n<ol start=\"4\">\n<li><code class=\"language-text\">.eslintrc.js</code> の <code class=\"language-text\">extends</code> 末尾に以下を必要に応じて追記。</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">extends</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">'prettier'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 最低限必要</span>\n    <span class=\"token string\">'prettier/@typescript-eslint'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'prettier/react'</span>\n    <span class=\"token string\">'prettier/vue'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'prettier/babel'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'prettier/flowtype'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'prettier/standard'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'prettier/unicorn'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ol start=\"5\">\n<li><em>eslint-plugin-prettier</em> は入れるな。</li>\n<li>VSCode を使う場合、<code class=\"language-text\">setting.json</code> に以下を追記します。</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"editor.formatOnSave\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 保存時に自動整形</span>\n  <span class=\"token property\">\"editor.codeActionsOnSave\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 保存時のアクション設定</span>\n    <span class=\"token property\">\"source.fixAll.eslint\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">// ESLintが走るようにする。ESLintの設定をちゃんとしてれば整形はされない。</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"editor.defaultFormatter\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"esbenp.prettier-vscode\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// フォーマッタにPrettierを指定</span>\n  <span class=\"token property\">\"prettier.configPath\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\".prettierrc.json\"</span> <span class=\"token comment\">// Prettierの設定ファイルを読み込む</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>はい、今度こそお疲れ様でした。<br>\nこれで当初のミッションは果たせたと思います。</p>\n<blockquote>\n<p>叶えたいこと。</p>\n<ul>\n<li><em>Prettier</em> には整形をやらせる。 (ソースの統一性を保つ。 <code class=\"language-text\">eslint --fix</code> は使わない)</li>\n<li><em>ESLint</em> にはコード品質チェック (バグチェック) をやらせる。</li>\n</ul>\n</blockquote>\n<p>この記事が役に立ったと思ったら拡散して、みんなに教えてあげてください。<br>\n英語はブロンズなので「ここは間違ってる」や「分かりにくい」と思ったらご指摘ください。</p>"}},"pageContext":{"slug":"7a8u9ezf8fy23"}},"staticQueryHashes":["1222574250","884784597"]}